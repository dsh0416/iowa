// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/message.proto

/*
Package proto is a generated protocol buffer package.

protoc --go_out=plugins=grpc:. proto/*.proto

It is generated from these files:
	proto/message.proto

It has these top-level messages:
	AuthRequest
	AuthResponse
	Empty
	Task
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto1.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AuthResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto1.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuthResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Task struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto1.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto1.RegisterType((*AuthRequest)(nil), "proto.AuthRequest")
	proto1.RegisterType((*AuthResponse)(nil), "proto.AuthResponse")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*Task)(nil), "proto.Task")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Message service

type MessageClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Done(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	Register(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Message_RegisterClient, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/proto.Message/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Done(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.Message/Done", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Register(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Message_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Message_serviceDesc.Streams[0], c.cc, "/proto.Message/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Message_RegisterClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type messageRegisterClient struct {
	grpc.ClientStream
}

func (x *messageRegisterClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Message service

type MessageServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	Done(context.Context, *Task) (*Empty, error)
	Register(*Empty, Message_RegisterServer) error
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Message/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Message/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Done(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServer).Register(m, &messageRegisterServer{stream})
}

type Message_RegisterServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type messageRegisterServer struct {
	grpc.ServerStream
}

func (x *messageRegisterServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Message_Auth_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _Message_Done_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Message_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/message.proto",
}

func init() { proto1.RegisterFile("proto/message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xbf, 0x4e, 0xc4, 0x30,
	0x0c, 0x87, 0x95, 0x90, 0x72, 0xe0, 0x3b, 0x31, 0xf8, 0x18, 0xaa, 0x4e, 0x34, 0x0b, 0x4c, 0x2d,
	0x02, 0x66, 0x24, 0x24, 0x18, 0x59, 0x2a, 0x5e, 0x20, 0xa8, 0x56, 0xa9, 0xaa, 0x26, 0xa5, 0x49,
	0x07, 0x5e, 0x80, 0xe7, 0x46, 0xf9, 0x83, 0x68, 0xc5, 0x14, 0xff, 0x3e, 0xdb, 0xf2, 0x17, 0x38,
	0x4e, 0xb3, 0x71, 0xa6, 0x1e, 0xc9, 0x5a, 0xd5, 0x51, 0x15, 0x12, 0x66, 0xe1, 0x91, 0x25, 0xec,
	0x9f, 0x16, 0xf7, 0xd1, 0xd0, 0xe7, 0x42, 0xd6, 0x21, 0x82, 0xd0, 0x6a, 0xa4, 0x9c, 0x5d, 0xb1,
	0x9b, 0xf3, 0x26, 0xd4, 0xf2, 0x01, 0x0e, 0x71, 0xc4, 0x4e, 0x46, 0x5b, 0xc2, 0x0b, 0xe0, 0x7d,
	0x9b, 0x26, 0x78, 0xdf, 0xe2, 0x25, 0x64, 0xce, 0x0c, 0xa4, 0x73, 0x1e, 0x50, 0x0c, 0x72, 0x07,
	0xd9, 0xcb, 0x38, 0xb9, 0x2f, 0xf9, 0x08, 0xe2, 0x4d, 0xd9, 0xe1, 0xdf, 0xda, 0xef, 0x29, 0xfe,
	0x77, 0xca, 0xb3, 0x56, 0x39, 0x95, 0x9f, 0x44, 0xe6, 0xeb, 0xbb, 0x6f, 0x06, 0xbb, 0xd7, 0xa8,
	0x8e, 0x35, 0x08, 0xaf, 0x82, 0x18, 0x3f, 0x51, 0xad, 0xd4, 0x8b, 0xe3, 0x86, 0x25, 0xd7, 0x12,
	0xc4, 0xb3, 0xd1, 0x84, 0xfb, 0xd4, 0xf4, 0x26, 0xc5, 0x21, 0x85, 0xe0, 0x87, 0xd7, 0x70, 0xd6,
	0x50, 0xd7, 0x5b, 0x47, 0x33, 0x6e, 0x3a, 0xc5, 0x7a, 0xe9, 0x96, 0xbd, 0x9f, 0x86, 0x74, 0xff,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x02, 0x12, 0x0a, 0x13, 0x4f, 0x01, 0x00, 0x00,
}
